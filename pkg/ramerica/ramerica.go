package ramerica

import (
	"encoding/json"
	"io"
	"log"
	"net/http"

	"github.com/PuerkitoBio/goquery"
	"github.com/pkg/errors"
	"github.com/savaki/jq"
)

func Search() ([]*Record, error) {
	resp, err := request()
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	return parseRepsonse(resp)
}

func request() (*http.Response, error) {
	// curl 'https://www.reserveamerica.com/explore/search-results?pageNumber=0&type=nearby&longitude=-122.07237049999999&latitude=37.4092297&arrivalDate=2020-08-11&lengthOfStay=2&interest=camping&rcs=50'   -H 'Connection: keep-alive'   -H 'Upgrade-Insecure-Requests: 1'   -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'   -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'   -H 'Sec-Fetch-Site: none'   -H 'Sec-Fetch-Mode: navigate'   -H 'Sec-Fetch-Dest: document'   -H 'Accept-Language: en-US,en;q=0.9'

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", "https://www.reserveamerica.com/explore/search-results?&pageNumber=0&type=nearby&longitude=-122.07237049999999&latitude=37.4092297&arrivalDate=2020-08-11&lengthOfStay=2&interest=camping&rcs=50", nil)
	if err != nil {
		return nil, errors.Wrap(err, "NewReq")
	}
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	req.Header.Set("Sec-Fetch-Site", "none")
	req.Header.Set("Sec-Fetch-Mode", "navigate")
	req.Header.Set("Sec-Fetch-Dest", "document")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9")
	return cachedDo(req)

}

func cachedDo(req *http.Request) (*http.Response, error) {
	return http.DefaultClient.Do(req)
}

func parseRepsonse(resp *http.Response) ([]*Record, error) {
	var records []*Record
	doc, err := goquery.NewDocumentFromReader(io.Reader(resp.Body))
	if err != nil {
		return nil, errors.Wrap(err, "goqueryNew")
	}

	raw := ""
	doc.Find("#initialState").Each(func(i int, s *goquery.Selection) {
		raw = s.Text()
	})
	defer resp.Body.Close()

	// filter out the relevent json part because golang can't if it in struct
	jqResp, err := filterJq(raw)
	if err != nil {
		return nil, errors.Wrap(err, "parseJQ")
	}
	if err := json.Unmarshal(jqResp, &records); err != nil {
		return records, errors.Wrapf(err, "unmarshal")
	}
	return records, nil
}

// return smaller part of the json
// because of https://github.com/99designs/gqlgen/issues/810#issuecomment-518965300
func filterJq(input string) ([]byte, error) {
	var resp []byte
	op, err := jq.Parse(".backend.search.searchResults.records") // create an Op
	if err != nil {
		return resp, errors.Wrap(err, "jq parse")
	}
	resp, err = op.Apply([]byte(input)) // value == '"world"'
	log.Printf("length of parsed jq %d", len(resp))
	return resp, err
}
